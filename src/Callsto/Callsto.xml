<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Callsto</name>
    </assembly>
    <members>
        <member name="T:Callsto.CallGraph">
            <summary>
            Provides a call graph for all types in a module.
            </summary>
        </member>
        <member name="M:Callsto.CallGraph.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Callsto.CallGraph"/> class.
            </summary>
            <param name="assemblies">Set of assemblies</param>
        </member>
        <member name="M:Callsto.CallGraph.Build">
            <summary>
            Builds a graph of methods in the assemblies.
            </summary>
            <returns>Set of root nodes in the forest</returns>
        </member>
        <member name="T:Callsto.ConsoleOutput">
            <summary>
            Primitives to export to console.
            </summary>
        </member>
        <member name="M:Callsto.ConsoleOutput.ToConsole``1(System.Collections.Generic.IEnumerable{Callsto.Node{``0}})">
            <summary>
            Prints the graphs on a console.
            </summary>
            <param name="roots">Root nodes of graphs in the pseudoforest.</param>
            <typeparam name="T">Base type for the graph.</typeparam>
        </member>
        <member name="T:Callsto.Edge`1">
            <summary>
            An edge of between nodes.
            </summary>
            <typeparam name="T">Type of tree node.</typeparam>
        </member>
        <member name="M:Callsto.Edge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Callsto.Edge`1"/> class.
            </summary>
            <param name="start">Start node for the edge.</param>
            <param name="end">End node for the edge.</param>
        </member>
        <member name="P:Callsto.Edge`1.End">
            <summary>
            Gets the destination node reference.
            </summary>
        </member>
        <member name="P:Callsto.Edge`1.Start">
            <summary>
            Gets the source node reference.
            </summary>
        </member>
        <member name="M:Callsto.Edge`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Callsto.EdgeExtensions">
            <summary>
            Operations on edges.
            </summary>
        </member>
        <member name="M:Callsto.EdgeExtensions.Graph``1(System.Collections.Generic.IEnumerable{Callsto.Edge{``0}})">
            <summary>
            Builds a graph.
            </summary>
            <param name="edges">Set of edges.</param>
            <returns>Returns a set of graphs from the edges.</returns>
            <typeparam name="T">Type of tree node.</typeparam>
        </member>
        <member name="T:Callsto.GraphConfig">
            <summary>
            Configuration for a graph.
            </summary>
        </member>
        <member name="P:Callsto.GraphConfig.Default">
            <summary>
            Gets a default instance of the configuration.
            </summary>
        </member>
        <member name="P:Callsto.GraphConfig.Assemblies">
            <summary>
            Gets the set of assemblies configured for exploration.
            </summary>
        </member>
        <member name="M:Callsto.GraphConfig.Assembly(System.String)">
            <summary>
            Adds an assembly into configuration.
            </summary>
            <param name="path">Path of an assembly to explore.</param>
            <returns>Configuration instance.</returns>
        </member>
        <member name="T:Callsto.GraphConfigExtensions">
            <summary>
            Extensions for a configuration instance.
            </summary>
        </member>
        <member name="M:Callsto.GraphConfigExtensions.Modules(Callsto.GraphConfig)">
            <summary>
            Gets an immutable list of modules for this configuration.
            </summary>
            <param name="config">Configuration instance.</param>
            <returns>List of modules.</returns>
        </member>
        <member name="T:Callsto.Method">
            <summary>
            Abstractions of a Method in CIL.
            </summary>
        </member>
        <member name="M:Callsto.Method.Edges(Mono.Cecil.MethodReference)">
            <summary>
            Gets the edges between a method and it's children.
            </summary>
            <param name="methodref">Method reference.</param>
            <returns>Edges between the method and it's children.</returns>
        </member>
        <member name="T:Callsto.Module">
            <summary>
            Abstracts a net assembly module.
            </summary>
        </member>
        <member name="M:Callsto.Module.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Callsto.Module"/> class.
            </summary>
            <param name="assemblyPath">Full path to an assembly.</param>
        </member>
        <member name="P:Callsto.Module.Types">
            <summary>
            Gets the types defined in this module.
            </summary>
        </member>
        <member name="T:Callsto.Node`1">
            <summary>
            A node of a tree.
            </summary>
            <typeparam name="T">Type of tree node.</typeparam>
        </member>
        <member name="M:Callsto.Node`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Callsto.Node`1"/> class.
            </summary>
            <param name="element">Data for the node.</param>
        </member>
        <member name="P:Callsto.Node`1.Element">
            <summary>
            Gets the element for this node.
            </summary>
        </member>
        <member name="P:Callsto.Node`1.Children">
            <summary>
            Gets the set of outgoing edges.
            </summary>
        </member>
        <member name="T:Callsto.NodeExtensions">
            <summary>
            Operations on a <see cref="T:Callsto.Node`1"/>.
            </summary>
        </member>
        <member name="M:Callsto.NodeExtensions.DepthFirstWalk``1(System.Collections.Generic.IEnumerable{Callsto.Node{``0}},System.Action{Callsto.Node{``0}},System.Action{Callsto.Node{``0}})">
            <summary>
            Walks a forest of nodes in depth first order. Applies a tee function to each node.
            </summary>
            <param name="nodes">Set of nodes in the forest.</param>
            <param name="print">A print function to apply for each node.</param>
            <param name="leaf">A print function to apply for each leaf node.</param>
            <returns>Returns a set of nodes in the forest.</returns>
            <typeparam name="T">Type of tree node.</typeparam>
        </member>
        <member name="T:Callsto.Program">
            <summary>
            Callsto application.
            </summary>
        </member>
        <member name="M:Callsto.Program.Main(System.String[])">
            <summary>
            Program entrypoint.
            </summary>
            <param name="args">Set of command line arguments.</param>
            <returns>0 if successful</returns>
        </member>
        <member name="M:Callsto.Program.Run(Callsto.Program.CallstoOptions)">
            <summary>
            Runs the application with parsed options.
            </summary>
            <param name="options">Parsed options.</param>
            <returns>0 if successful</returns>
        </member>
    </members>
</doc>
